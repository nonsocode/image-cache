name: Image Cache
description: Caches images in a local directory.
inputs:
  image:
    description: |
      The image to cache. This should be a fully qualified image name, including
      the registry. For example, `docker.io/library/postgres:latest`.
    required: true
outputs:
  cachekey:
    description: |
      The cache key is a string that is used to identify the cache. It is
      generated from the image name by replacing all slashes and colons with
      underscores.
    value: ${{ steps.cachemeta.outputs.cachekey }}
  cache-hit:
    description: |
      A boolean that is true if the cache was hit, false otherwise.
    value: ${{ steps.image-cache.outputs.cache-hit }}
runs:
  using: composite
  steps:
    - run: mkdir -p ~/img-cache
      shell: bash
    - id: cachemeta
      shell: bash
      run: |-
        cachekey=$(echo "${{ inputs.image }}" | sed 's/[:\/.]/_/g')
        cachepath="~/img-cache/${cachekey}.tar"
        echo "cachekey=$cachekey" >> $GITHUB_OUTPUT
        echo "cachepath=$cachepath" >> $GITHUB_OUTPUT

    - id: image-cache
      uses: actions/cache@v1
      with:
          path: ~/img-cache
          key: ${{ steps.cachemeta.outputs.cachekey }}

    - if: steps.image-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
          set -x
          docker pull ${{ inputs.image }}
          docker save -o  ${{ steps.cachemeta.outputs.cachepath }} ${{ inputs.image }}

    - if: steps.image-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |-
        docker load -i ${{ steps.cachemeta.outputs.cachepath }}